# Generated by Django 5.1.11 on 2025-07-23 13:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("travel_preferences", models.JSONField(blank=True, default=dict)),
                (
                    "budget_range",
                    models.CharField(
                        choices=[
                            ("budget", "Budget (Under $1000)"),
                            ("mid_range", "Mid-range ($1000-$5000)"),
                            ("luxury", "Luxury ($5000+)"),
                        ],
                        default="mid_range",
                        max_length=20,
                    ),
                ),
                ("interests", models.JSONField(blank=True, default=list)),
                (
                    "travel_style",
                    models.CharField(
                        choices=[
                            ("explorer", "Explorer"),
                            ("relaxer", "Relaxer"),
                            ("adventurer", "Adventurer"),
                            ("cultural", "Cultural"),
                            ("foodie", "Foodie"),
                        ],
                        default="explorer",
                        max_length=20,
                    ),
                ),
                ("previous_destinations", models.JSONField(blank=True, default=list)),
                (
                    "travel_frequency",
                    models.CharField(
                        choices=[
                            ("rarely", "Rarely (Once a year or less)"),
                            ("occasionally", "Occasionally (2-3 times a year)"),
                            ("frequently", "Frequently (4+ times a year)"),
                        ],
                        default="occasionally",
                        max_length=20,
                    ),
                ),
                ("dietary_restrictions", models.JSONField(blank=True, default=list)),
                ("accessibility_needs", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_premium", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Conversation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_id", models.CharField(db_index=True, max_length=100)),
                ("messages", models.JSONField(default=list)),
                ("context", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("total_messages", models.IntegerField(default=0)),
                ("avg_response_time", models.FloatField(default=0.0)),
                (
                    "user_satisfaction",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="TravelRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("query", models.TextField()),
                ("response", models.TextField()),
                ("agents_used", models.JSONField(default=list)),
                ("rag_sources", models.JSONField(blank=True, default=list)),
                ("processing_time", models.FloatField(default=0.0)),
                ("destination", models.CharField(blank=True, max_length=200)),
                (
                    "budget_estimate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("duration_days", models.IntegerField(blank=True, null=True)),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("itinerary", "Itinerary Planning"),
                            ("accommodation", "Accommodation"),
                            ("activities", "Activities"),
                            ("dining", "Dining"),
                            ("transportation", "Transportation"),
                            ("general", "General Advice"),
                        ],
                        default="general",
                        max_length=50,
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("is_bookmarked", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.conversation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["user", "session_id"], name="api_convers_user_id_26f485_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["created_at"], name="api_convers_created_e7a0bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="travelrecommendation",
            index=models.Index(
                fields=["user", "destination"], name="api_travelr_user_id_bca210_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="travelrecommendation",
            index=models.Index(
                fields=["recommendation_type"], name="api_travelr_recomme_ca3e63_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="travelrecommendation",
            index=models.Index(
                fields=["created_at"], name="api_travelr_created_c0e9c7_idx"
            ),
        ),
    ]
