from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid
import json

class User(AbstractUser):
    """Enhanced User model for Travel AI system"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    # Travel Preferences
    travel_preferences = models.JSONField(default=dict, blank=True)
    budget_range = models.CharField(max_length=20, choices=[
        ('budget', 'Budget (Under $1000)'),
        ('mid_range', 'Mid-range ($1000-$5000)'),
        ('luxury', 'Luxury ($5000+)')
    ], default='mid_range')

    # User Profile
    interests = models.JSONField(default=list, blank=True)
    travel_style = models.CharField(max_length=20, choices=[
        ('explorer', 'Explorer'),
        ('relaxer', 'Relaxer'),
        ('adventurer', 'Adventurer'),
        ('cultural', 'Cultural'),
        ('foodie', 'Foodie')
    ], default='explorer')

    # Travel History
    previous_destinations = models.JSONField(default=list, blank=True)
    travel_frequency = models.CharField(max_length=20, choices=[
        ('rarely', 'Rarely (Once a year or less)'),
        ('occasionally', 'Occasionally (2-3 times a year)'),
        ('frequently', 'Frequently (4+ times a year)')
    ], default='occasionally')

    # Accessibility & Dietary
    dietary_restrictions = models.JSONField(default=list, blank=True)
    accessibility_needs = models.JSONField(default=list, blank=True)

    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_premium = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.username} ({self.travel_style})"

class Conversation(models.Model):
    """Conversation sessions between users and AI agents"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='conversations')
    session_id = models.CharField(max_length=100, db_index=True)

    # Conversation Data
    messages = models.JSONField(default=list)
    context = models.JSONField(default=dict, blank=True)

    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)

    # Performance Metrics
    total_messages = models.IntegerField(default=0)
    avg_response_time = models.FloatField(default=0.0)
    user_satisfaction = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        null=True, blank=True
    )

    class Meta:
        ordering = ['-updated_at']
        indexes = [
            models.Index(fields=['user', 'session_id']),
            models.Index(fields=['created_at']),
        ]

    def __str__(self):
        return f"Conversation {self.session_id[:8]} - {self.user.username}"

class TravelRecommendation(models.Model):
    """Travel recommendations generated by AI agents"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='recommendations')
    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, null=True, blank=True)

    # Query & Response
    query = models.TextField()
    response = models.TextField()

    # AI Processing Details
    agents_used = models.JSONField(default=list)
    rag_sources = models.JSONField(default=list, blank=True)
    processing_time = models.FloatField(default=0.0)

    # Recommendation Details
    destination = models.CharField(max_length=200, blank=True)
    budget_estimate = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    duration_days = models.IntegerField(null=True, blank=True)
    recommendation_type = models.CharField(max_length=50, choices=[
        ('itinerary', 'Itinerary Planning'),
        ('accommodation', 'Accommodation'),
        ('activities', 'Activities'),
        ('dining', 'Dining'),
        ('transportation', 'Transportation'),
        ('general', 'General Advice')
    ], default='general')

    # User Feedback
    rating = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        null=True, blank=True
    )
    feedback = models.TextField(blank=True)
    is_bookmarked = models.BooleanField(default=False)

    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['user', 'destination']),
            models.Index(fields=['recommendation_type']),
            models.Index(fields=['created_at']),
        ]

    def __str__(self):
        return f"{self.recommendation_type.title()} for {self.user.username}"
